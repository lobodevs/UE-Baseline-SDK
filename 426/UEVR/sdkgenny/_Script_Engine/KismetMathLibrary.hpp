#pragma once
#include <Windows.h>
#include <cstdint>
#include <string>
#include <string_view>
#include "..\_Script_CoreUObject\Box.hpp"
#include "..\_Script_CoreUObject\Box2D.hpp"
#include "..\_Script_CoreUObject\Color.hpp"
#include "..\_Script_CoreUObject\DateTime.hpp"
#include "..\_Script_CoreUObject\FrameNumber.hpp"
#include "..\_Script_CoreUObject\FrameRate.hpp"
#include "..\_Script_CoreUObject\IntPoint.hpp"
#include "..\_Script_CoreUObject\IntVector.hpp"
#include "..\_Script_CoreUObject\LinearColor.hpp"
#include "..\_Script_CoreUObject\Matrix.hpp"
#include "..\_Script_CoreUObject\Plane.hpp"
#include "..\_Script_CoreUObject\QualifiedFrameTime.hpp"
#include "..\_Script_CoreUObject\Quat.hpp"
#include "..\_Script_CoreUObject\RandomStream.hpp"
#include "..\_Script_CoreUObject\Rotator.hpp"
#include "..\_Script_CoreUObject\Timespan.hpp"
#include "..\_Script_CoreUObject\Transform.hpp"
#include "..\_Script_CoreUObject\Vector.hpp"
#include "..\_Script_CoreUObject\Vector2D.hpp"
#include "..\_Script_CoreUObject\Vector4.hpp"
#include "BlueprintFunctionLibrary.hpp"
namespace _Script_CoreUObject {
struct Class;
}
namespace _Script_Engine {
struct VectorSpringState;
}
namespace _Script_Engine {
struct FloatSpringState;
}
namespace _Script_CoreUObject {
struct Object;
}
namespace _Script_Engine {
#pragma pack(push, 1)
struct KismetMathLibrary : public BlueprintFunctionLibrary {
    static _Script_CoreUObject::Class* static_class();
    int32_t Xor_IntInt(int32_t A, int32_t B);
    void* Xor_Int64Int64(void* A, void* B);
    int32_t Wrap(int32_t Value, int32_t Min, int32_t Max);
    _Script_CoreUObject::Vector WeightedMovingAverage_FVector(_Script_CoreUObject::Vector CurrentSample, _Script_CoreUObject::Vector PreviousSample, float Weight);
    _Script_CoreUObject::Rotator WeightedMovingAverage_FRotator(_Script_CoreUObject::Rotator CurrentSample, _Script_CoreUObject::Rotator PreviousSample, float Weight);
    float WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight);
    float VSizeXYSquared(_Script_CoreUObject::Vector A);
    float VSizeXY(_Script_CoreUObject::Vector A);
    float VSizeSquared(_Script_CoreUObject::Vector A);
    float VSize2DSquared(_Script_CoreUObject::Vector2D A);
    float VSize2D(_Script_CoreUObject::Vector2D A);
    float VSize(_Script_CoreUObject::Vector A);
    _Script_CoreUObject::Vector VLerp(_Script_CoreUObject::Vector A, _Script_CoreUObject::Vector B, float Alpha);
    _Script_CoreUObject::Vector VInterpTo_Constant(_Script_CoreUObject::Vector Current, _Script_CoreUObject::Vector Target, float DeltaTime, float InterpSpeed);
    _Script_CoreUObject::Vector VInterpTo(_Script_CoreUObject::Vector Current, _Script_CoreUObject::Vector Target, float DeltaTime, float InterpSpeed);
    _Script_CoreUObject::Vector VectorSpringInterp(_Script_CoreUObject::Vector Current, _Script_CoreUObject::Vector Target, _Script_Engine::VectorSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);
    _Script_CoreUObject::Vector Vector_Zero();
    _Script_CoreUObject::Vector Vector_Up();
    void Vector_UnwindEuler(_Script_CoreUObject::Vector& A);
    _Script_CoreUObject::Vector2D Vector_UnitCartesianToSpherical(_Script_CoreUObject::Vector A);
    _Script_CoreUObject::Vector Vector_ToRadians(_Script_CoreUObject::Vector A);
    _Script_CoreUObject::Vector Vector_ToDegrees(_Script_CoreUObject::Vector A);
    _Script_CoreUObject::Vector Vector_SnappedToGrid(_Script_CoreUObject::Vector InVect, float InGridSize);
    void Vector_Set(_Script_CoreUObject::Vector& A, float X, float Y, float Z);
    _Script_CoreUObject::Vector Vector_Right();
    _Script_CoreUObject::Vector Vector_Reciprocal(_Script_CoreUObject::Vector& A);
    _Script_CoreUObject::Vector Vector_ProjectOnToNormal(_Script_CoreUObject::Vector V, _Script_CoreUObject::Vector InNormal);
    _Script_CoreUObject::Vector Vector_One();
    _Script_CoreUObject::Vector Vector_NormalUnsafe(_Script_CoreUObject::Vector& A);
    void Vector_Normalize(_Script_CoreUObject::Vector& A, float Tolerance);
    _Script_CoreUObject::Vector Vector_Normal2D(_Script_CoreUObject::Vector A, float Tolerance);
    _Script_CoreUObject::Vector Vector_MirrorByPlane(_Script_CoreUObject::Vector A, _Script_CoreUObject::Plane& InPlane);
    _Script_CoreUObject::Vector Vector_Left();
    bool Vector_IsZero(_Script_CoreUObject::Vector& A);
    bool Vector_IsUnit(_Script_CoreUObject::Vector& A, float SquaredLenthTolerance);
    bool Vector_IsUniform(_Script_CoreUObject::Vector& A, float Tolerance);
    bool Vector_IsNormal(_Script_CoreUObject::Vector& A);
    bool Vector_IsNearlyZero(_Script_CoreUObject::Vector& A, float Tolerance);
    bool Vector_IsNAN(_Script_CoreUObject::Vector& A);
    float Vector_HeadingAngle(_Script_CoreUObject::Vector A);
    _Script_CoreUObject::Vector Vector_GetSignVector(_Script_CoreUObject::Vector A);
    _Script_CoreUObject::Vector Vector_GetProjection(_Script_CoreUObject::Vector A);
    float Vector_GetAbsMin(_Script_CoreUObject::Vector A);
    float Vector_GetAbsMax(_Script_CoreUObject::Vector A);
    _Script_CoreUObject::Vector Vector_GetAbs(_Script_CoreUObject::Vector A);
    _Script_CoreUObject::Vector Vector_Forward();
    _Script_CoreUObject::Vector Vector_Down();
    float Vector_DistanceSquared(_Script_CoreUObject::Vector v1, _Script_CoreUObject::Vector v2);
    float Vector_Distance2DSquared(_Script_CoreUObject::Vector v1, _Script_CoreUObject::Vector v2);
    float Vector_Distance2D(_Script_CoreUObject::Vector v1, _Script_CoreUObject::Vector v2);
    float Vector_Distance(_Script_CoreUObject::Vector v1, _Script_CoreUObject::Vector v2);
    float Vector_CosineAngle2D(_Script_CoreUObject::Vector A, _Script_CoreUObject::Vector B);
    _Script_CoreUObject::Vector Vector_ComponentMin(_Script_CoreUObject::Vector A, _Script_CoreUObject::Vector B);
    _Script_CoreUObject::Vector Vector_ComponentMax(_Script_CoreUObject::Vector A, _Script_CoreUObject::Vector B);
    _Script_CoreUObject::Vector Vector_ClampSizeMax2D(_Script_CoreUObject::Vector A, float Max);
    _Script_CoreUObject::Vector Vector_ClampSizeMax(_Script_CoreUObject::Vector A, float Max);
    _Script_CoreUObject::Vector Vector_ClampSize2D(_Script_CoreUObject::Vector A, float Min, float Max);
    _Script_CoreUObject::Vector Vector_BoundedToCube(_Script_CoreUObject::Vector InVect, float InRadius);
    _Script_CoreUObject::Vector Vector_BoundedToBox(_Script_CoreUObject::Vector InVect, _Script_CoreUObject::Vector InBoxMin, _Script_CoreUObject::Vector InBoxMax);
    _Script_CoreUObject::Vector Vector_Backward();
    void Vector_Assign(_Script_CoreUObject::Vector& A, _Script_CoreUObject::Vector& InVector);
    void Vector_AddBounded(_Script_CoreUObject::Vector& A, _Script_CoreUObject::Vector InAddVect, float InRadius);
    _Script_CoreUObject::Vector4 Vector4_Zero();
    float Vector4_SizeSquared3(_Script_CoreUObject::Vector4& A);
    float Vector4_SizeSquared(_Script_CoreUObject::Vector4& A);
    float Vector4_Size3(_Script_CoreUObject::Vector4& A);
    float Vector4_Size(_Script_CoreUObject::Vector4& A);
    void Vector4_Set(_Script_CoreUObject::Vector4& A, float X, float Y, float Z, float W);
    _Script_CoreUObject::Vector4 Vector4_NormalUnsafe3(_Script_CoreUObject::Vector4& A);
    void Vector4_Normalize3(_Script_CoreUObject::Vector4& A, float Tolerance);
    _Script_CoreUObject::Vector4 Vector4_Normal3(_Script_CoreUObject::Vector4& A, float Tolerance);
    _Script_CoreUObject::Vector4 Vector4_Negated(_Script_CoreUObject::Vector4& A);
    _Script_CoreUObject::Vector4 Vector4_MirrorByVector3(_Script_CoreUObject::Vector4& Direction, _Script_CoreUObject::Vector4& SurfaceNormal);
    bool Vector4_IsZero(_Script_CoreUObject::Vector4& A);
    bool Vector4_IsUnit3(_Script_CoreUObject::Vector4& A, float SquaredLenthTolerance);
    bool Vector4_IsNormal3(_Script_CoreUObject::Vector4& A);
    bool Vector4_IsNearlyZero3(_Script_CoreUObject::Vector4& A, float Tolerance);
    bool Vector4_IsNAN(_Script_CoreUObject::Vector4& A);
    float Vector4_DotProduct3(_Script_CoreUObject::Vector4& A, _Script_CoreUObject::Vector4& B);
    float Vector4_DotProduct(_Script_CoreUObject::Vector4& A, _Script_CoreUObject::Vector4& B);
    _Script_CoreUObject::Vector4 Vector4_CrossProduct3(_Script_CoreUObject::Vector4& A, _Script_CoreUObject::Vector4& B);
    void Vector4_Assign(_Script_CoreUObject::Vector4& A, _Script_CoreUObject::Vector4& InVector);
    _Script_CoreUObject::Vector2D Vector2DInterpTo_Constant(_Script_CoreUObject::Vector2D Current, _Script_CoreUObject::Vector2D Target, float DeltaTime, float InterpSpeed);
    _Script_CoreUObject::Vector2D Vector2DInterpTo(_Script_CoreUObject::Vector2D Current, _Script_CoreUObject::Vector2D Target, float DeltaTime, float InterpSpeed);
    _Script_CoreUObject::Vector2D Vector2D_Zero();
    _Script_CoreUObject::Vector2D Vector2D_Unit45Deg();
    _Script_CoreUObject::Vector2D Vector2D_One();
    _Script_CoreUObject::Vector VEase(_Script_CoreUObject::Vector A, _Script_CoreUObject::Vector B, float Alpha, void* EasingFunc, float BlendExp, int32_t Steps);
    _Script_CoreUObject::DateTime UtcNow();
    _Script_CoreUObject::Vector4 TransformVector4(_Script_CoreUObject::Matrix& Matrix, _Script_CoreUObject::Vector4& Vec4);
    _Script_CoreUObject::Rotator TransformRotation(_Script_CoreUObject::Transform& T, _Script_CoreUObject::Rotator Rotation);
    _Script_CoreUObject::Vector TransformLocation(_Script_CoreUObject::Transform& T, _Script_CoreUObject::Vector Location);
    _Script_CoreUObject::Vector TransformDirection(_Script_CoreUObject::Transform& T, _Script_CoreUObject::Vector Direction);
    float Transform_Determinant(_Script_CoreUObject::Transform& Transform);
    _Script_CoreUObject::Vector2D ToSign2D(_Script_CoreUObject::Vector2D A);
    _Script_CoreUObject::Vector2D ToRounded2D(_Script_CoreUObject::Vector2D A);
    void ToDirectionAndLength2D(_Script_CoreUObject::Vector2D A, _Script_CoreUObject::Vector2D& OutDir, float& OutLength);
    _Script_CoreUObject::DateTime Today();
    _Script_CoreUObject::Transform TLerp(_Script_CoreUObject::Transform& A, _Script_CoreUObject::Transform& B, float Alpha, void* InterpMode);
    _Script_CoreUObject::Transform TInterpTo(_Script_CoreUObject::Transform& Current, _Script_CoreUObject::Transform& Target, float DeltaTime, float InterpSpeed);
    _Script_CoreUObject::Timespan TimespanZeroValue();
    float TimespanRatio(_Script_CoreUObject::Timespan A, _Script_CoreUObject::Timespan B);
    _Script_CoreUObject::Timespan TimespanMinValue();
    _Script_CoreUObject::Timespan TimespanMaxValue();
    bool TimespanFromString(void* TimespanString, _Script_CoreUObject::Timespan& Result);
    _Script_CoreUObject::Transform TEase(_Script_CoreUObject::Transform& A, _Script_CoreUObject::Transform& B, float Alpha, void* EasingFunc, float BlendExp, int32_t Steps);
    float Tan(float A);
    _Script_CoreUObject::Vector Subtract_VectorVector(_Script_CoreUObject::Vector A, _Script_CoreUObject::Vector B);
    _Script_CoreUObject::Vector Subtract_VectorInt(_Script_CoreUObject::Vector A, int32_t B);
    _Script_CoreUObject::Vector Subtract_VectorFloat(_Script_CoreUObject::Vector A, float B);
    _Script_CoreUObject::Vector4 Subtract_Vector4Vector4(_Script_CoreUObject::Vector4& A, _Script_CoreUObject::Vector4& B);
    _Script_CoreUObject::Vector2D Subtract_Vector2DVector2D(_Script_CoreUObject::Vector2D A, _Script_CoreUObject::Vector2D B);
    _Script_CoreUObject::Vector2D Subtract_Vector2DFloat(_Script_CoreUObject::Vector2D A, float B);
    _Script_CoreUObject::Timespan Subtract_TimespanTimespan(_Script_CoreUObject::Timespan A, _Script_CoreUObject::Timespan B);
    _Script_CoreUObject::Quat Subtract_QuatQuat(_Script_CoreUObject::Quat& A, _Script_CoreUObject::Quat& B);
    _Script_CoreUObject::LinearColor Subtract_LinearColorLinearColor(_Script_CoreUObject::LinearColor A, _Script_CoreUObject::LinearColor B);
    _Script_CoreUObject::IntPoint Subtract_IntPointIntPoint(_Script_CoreUObject::IntPoint A, _Script_CoreUObject::IntPoint B);
    _Script_CoreUObject::IntPoint Subtract_IntPointInt(_Script_CoreUObject::IntPoint A, int32_t B);
    int32_t Subtract_IntInt(int32_t A, int32_t B);
    void* Subtract_Int64Int64(void* A, void* B);
    float Subtract_FloatFloat(float A, float B);
    _Script_CoreUObject::DateTime Subtract_DateTimeTimespan(_Script_CoreUObject::DateTime A, _Script_CoreUObject::Timespan B);
    _Script_CoreUObject::Timespan Subtract_DateTimeDateTime(_Script_CoreUObject::DateTime A, _Script_CoreUObject::DateTime B);
    void* Subtract_ByteByte(void* A, void* B);
    float Square(float A);
    float Sqrt(float A);
    _Script_CoreUObject::Vector Spherical2DToUnitCartesian(_Script_CoreUObject::Vector2D A);
    float Sin(float A);
    void* SignOfInteger64(void* A);
    int32_t SignOfInteger(int32_t A);
    float SignOfFloat(float A);
    void SetRandomStreamSeed(_Script_CoreUObject::RandomStream& Stream, int32_t NewSeed);
    void Set2D(_Script_CoreUObject::Vector2D& A, float X, float Y);
    _Script_CoreUObject::Vector SelectVector(_Script_CoreUObject::Vector A, _Script_CoreUObject::Vector B, bool bPickA);
    _Script_CoreUObject::Transform SelectTransform(_Script_CoreUObject::Transform& A, _Script_CoreUObject::Transform& B, bool bPickA);
    void* SelectString(void* A, void* B, bool bPickA);
    _Script_CoreUObject::Rotator SelectRotator(_Script_CoreUObject::Rotator A, _Script_CoreUObject::Rotator B, bool bPickA);
    _Script_CoreUObject::Object* SelectObject(_Script_CoreUObject::Object* A, _Script_CoreUObject::Object* B, bool bSelectA);
    int32_t SelectInt(int32_t A, int32_t B, bool bPickA);
    float SelectFloat(float A, float B, bool bPickA);
    _Script_CoreUObject::LinearColor SelectColor(_Script_CoreUObject::LinearColor A, _Script_CoreUObject::LinearColor B, bool bPickA);
    void* SelectClass(void* A, void* B, bool bSelectA);
    void SeedRandomStream(_Script_CoreUObject::RandomStream& Stream);
    float SafeDivide(float A, float B);
    void* Round64(float A);
    int32_t Round(float A);
    _Script_CoreUObject::Rotator RotatorFromAxisAndAngle(_Script_CoreUObject::Vector Axis, float Angle);
    _Script_CoreUObject::Vector RotateAngleAxis(_Script_CoreUObject::Vector InVect, float AngleDeg, _Script_CoreUObject::Vector Axis);
    _Script_CoreUObject::Rotator RLerp(_Script_CoreUObject::Rotator A, _Script_CoreUObject::Rotator B, float Alpha, bool bShortestPath);
    _Script_CoreUObject::Rotator RInterpTo_Constant(_Script_CoreUObject::Rotator Current, _Script_CoreUObject::Rotator Target, float DeltaTime, float InterpSpeed);
    _Script_CoreUObject::Rotator RInterpTo(_Script_CoreUObject::Rotator Current, _Script_CoreUObject::Rotator Target, float DeltaTime, float InterpSpeed);
    void RGBToHSV_Vector(_Script_CoreUObject::LinearColor RGB, _Script_CoreUObject::LinearColor& HSV);
    void RGBToHSV(_Script_CoreUObject::LinearColor InColor, float& H, float& S, float& V, float& A);
    _Script_CoreUObject::LinearColor RGBLinearToHSV(_Script_CoreUObject::LinearColor RGB);
    void ResetVectorSpringState(_Script_Engine::VectorSpringState& SpringState);
    void ResetRandomStream(_Script_CoreUObject::RandomStream& Stream);
    void ResetFloatSpringState(_Script_Engine::FloatSpringState& SpringState);
    _Script_CoreUObject::Rotator REase(_Script_CoreUObject::Rotator A, _Script_CoreUObject::Rotator B, float Alpha, bool bShortestPath, void* EasingFunc, float BlendExp, int32_t Steps);
    _Script_CoreUObject::Vector RandomUnitVectorInEllipticalConeInRadiansFromStream(_Script_CoreUObject::Vector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, _Script_CoreUObject::RandomStream& Stream);
    _Script_CoreUObject::Vector RandomUnitVectorInEllipticalConeInRadians(_Script_CoreUObject::Vector ConeDir, float MaxYawInRadians, float MaxPitchInRadians);
    _Script_CoreUObject::Vector RandomUnitVectorInEllipticalConeInDegreesFromStream(_Script_CoreUObject::Vector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, _Script_CoreUObject::RandomStream& Stream);
    _Script_CoreUObject::Vector RandomUnitVectorInEllipticalConeInDegrees(_Script_CoreUObject::Vector ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);
    _Script_CoreUObject::Vector RandomUnitVectorInConeInRadiansFromStream(_Script_CoreUObject::Vector& ConeDir, float ConeHalfAngleInRadians, _Script_CoreUObject::RandomStream& Stream);
    _Script_CoreUObject::Vector RandomUnitVectorInConeInRadians(_Script_CoreUObject::Vector ConeDir, float ConeHalfAngleInRadians);
    _Script_CoreUObject::Vector RandomUnitVectorInConeInDegreesFromStream(_Script_CoreUObject::Vector& ConeDir, float ConeHalfAngleInDegrees, _Script_CoreUObject::RandomStream& Stream);
    _Script_CoreUObject::Vector RandomUnitVectorInConeInDegrees(_Script_CoreUObject::Vector ConeDir, float ConeHalfAngleInDegrees);
    _Script_CoreUObject::Vector RandomUnitVectorFromStream(_Script_CoreUObject::RandomStream& Stream);
    _Script_CoreUObject::Vector RandomUnitVector();
    _Script_CoreUObject::Rotator RandomRotatorFromStream(bool bRoll, _Script_CoreUObject::RandomStream& Stream);
    _Script_CoreUObject::Rotator RandomRotator(bool bRoll);
    _Script_CoreUObject::Vector RandomPointInBoundingBox(_Script_CoreUObject::Vector Origin, _Script_CoreUObject::Vector BoxExtent);
    int32_t RandomIntegerInRangeFromStream(int32_t Min, int32_t Max, _Script_CoreUObject::RandomStream& Stream);
    int32_t RandomIntegerInRange(int32_t Min, int32_t Max);
    int32_t RandomIntegerFromStream(int32_t Max, _Script_CoreUObject::RandomStream& Stream);
    void* RandomInteger64InRange(void* Min, void* Max);
    void* RandomInteger64(void* Max);
    int32_t RandomInteger(int32_t Max);
    float RandomFloatInRangeFromStream(float Min, float Max, _Script_CoreUObject::RandomStream& Stream);
    float RandomFloatInRange(float Min, float Max);
    float RandomFloatFromStream(_Script_CoreUObject::RandomStream& Stream);
    float RandomFloat();
    bool RandomBoolWithWeightFromStream(float Weight, _Script_CoreUObject::RandomStream& RandomStream);
    bool RandomBoolWithWeight(float Weight);
    bool RandomBoolFromStream(_Script_CoreUObject::RandomStream& Stream);
    bool RandomBool();
    float RadiansToDegrees(float A);
    _Script_CoreUObject::Vector Quat_VectorUp(_Script_CoreUObject::Quat& Q);
    _Script_CoreUObject::Vector Quat_VectorRight(_Script_CoreUObject::Quat& Q);
    _Script_CoreUObject::Vector Quat_VectorForward(_Script_CoreUObject::Quat& Q);
    _Script_CoreUObject::Vector Quat_UnrotateVector(_Script_CoreUObject::Quat& Q, _Script_CoreUObject::Vector& V);
    float Quat_SizeSquared(_Script_CoreUObject::Quat& Q);
    float Quat_Size(_Script_CoreUObject::Quat& Q);
    void Quat_SetFromEuler(_Script_CoreUObject::Quat& Q, _Script_CoreUObject::Vector& Euler);
    void Quat_SetComponents(_Script_CoreUObject::Quat& Q, float X, float Y, float Z, float W);
    _Script_CoreUObject::Rotator Quat_Rotator(_Script_CoreUObject::Quat& Q);
    _Script_CoreUObject::Vector Quat_RotateVector(_Script_CoreUObject::Quat& Q, _Script_CoreUObject::Vector& V);
    _Script_CoreUObject::Quat Quat_Normalized(_Script_CoreUObject::Quat& Q, float Tolerance);
    void Quat_Normalize(_Script_CoreUObject::Quat& Q, float Tolerance);
    _Script_CoreUObject::Quat Quat_MakeFromEuler(_Script_CoreUObject::Vector& Euler);
    _Script_CoreUObject::Quat Quat_Log(_Script_CoreUObject::Quat& Q);
    bool Quat_IsNormalized(_Script_CoreUObject::Quat& Q);
    bool Quat_IsNonFinite(_Script_CoreUObject::Quat& Q);
    bool Quat_IsIdentity(_Script_CoreUObject::Quat& Q, float Tolerance);
    bool Quat_IsFinite(_Script_CoreUObject::Quat& Q);
    _Script_CoreUObject::Quat Quat_Inversed(_Script_CoreUObject::Quat& Q);
    _Script_CoreUObject::Quat Quat_Identity();
    _Script_CoreUObject::Vector Quat_GetRotationAxis(_Script_CoreUObject::Quat& Q);
    _Script_CoreUObject::Vector Quat_GetAxisZ(_Script_CoreUObject::Quat& Q);
    _Script_CoreUObject::Vector Quat_GetAxisY(_Script_CoreUObject::Quat& Q);
    _Script_CoreUObject::Vector Quat_GetAxisX(_Script_CoreUObject::Quat& Q);
    float Quat_GetAngle(_Script_CoreUObject::Quat& Q);
    _Script_CoreUObject::Quat Quat_Exp(_Script_CoreUObject::Quat& Q);
    _Script_CoreUObject::Vector Quat_Euler(_Script_CoreUObject::Quat& Q);
    void Quat_EnforceShortestArcWith(_Script_CoreUObject::Quat& A, _Script_CoreUObject::Quat& B);
    float Quat_AngularDistance(_Script_CoreUObject::Quat& A, _Script_CoreUObject::Quat& B);
    _Script_CoreUObject::Vector ProjectVectorOnToVector(_Script_CoreUObject::Vector V, _Script_CoreUObject::Vector Target);
    _Script_CoreUObject::Vector ProjectVectorOnToPlane(_Script_CoreUObject::Vector V, _Script_CoreUObject::Vector PlaneNormal);
    _Script_CoreUObject::Vector ProjectPointOnToPlane(_Script_CoreUObject::Vector Point, _Script_CoreUObject::Vector PlaneBase, _Script_CoreUObject::Vector PlaneNormal);
    bool PointsAreCoplanar(void*& Points, float Tolerance);
    float PerlinNoise1D(float Value);
    int32_t Percent_IntInt(int32_t A, int32_t B);
    float Percent_FloatFloat(float A, float B);
    void* Percent_ByteByte(void* A, void* B);
    int32_t Or_IntInt(int32_t A, int32_t B);
    void* Or_Int64Int64(void* A, void* B);
    _Script_CoreUObject::DateTime Now();
    bool NotEqualExactly_VectorVector(_Script_CoreUObject::Vector A, _Script_CoreUObject::Vector B);
    bool NotEqualExactly_Vector4Vector4(_Script_CoreUObject::Vector4& A, _Script_CoreUObject::Vector4& B);
    bool NotEqualExactly_Vector2DVector2D(_Script_CoreUObject::Vector2D A, _Script_CoreUObject::Vector2D B);
    bool NotEqual_VectorVector(_Script_CoreUObject::Vector A, _Script_CoreUObject::Vector B, float ErrorTolerance);
    bool NotEqual_Vector4Vector4(_Script_CoreUObject::Vector4& A, _Script_CoreUObject::Vector4& B, float ErrorTolerance);
    bool NotEqual_Vector2DVector2D(_Script_CoreUObject::Vector2D A, _Script_CoreUObject::Vector2D B, float ErrorTolerance);
    bool NotEqual_TimespanTimespan(_Script_CoreUObject::Timespan A, _Script_CoreUObject::Timespan B);
    bool NotEqual_RotatorRotator(_Script_CoreUObject::Rotator A, _Script_CoreUObject::Rotator B, float ErrorTolerance);
    bool NotEqual_QuatQuat(_Script_CoreUObject::Quat& A, _Script_CoreUObject::Quat& B, float ErrorTolerance);
    bool NotEqual_ObjectObject(_Script_CoreUObject::Object* A, _Script_CoreUObject::Object* B);
    bool NotEqual_NameName(void* A, void* B);
    bool NotEqual_MatrixMatrix(_Script_CoreUObject::Matrix& A, _Script_CoreUObject::Matrix& B, float Tolerance);
    bool NotEqual_LinearColorLinearColor(_Script_CoreUObject::LinearColor A, _Script_CoreUObject::LinearColor B);
    bool NotEqual_IntPointIntPoint(_Script_CoreUObject::IntPoint A, _Script_CoreUObject::IntPoint B);
    bool NotEqual_IntInt(int32_t A, int32_t B);
    bool NotEqual_Int64Int64(void* A, void* B);
    bool NotEqual_FloatFloat(float A, float B);
    bool NotEqual_DateTimeDateTime(_Script_CoreUObject::DateTime A, _Script_CoreUObject::DateTime B);
    bool NotEqual_ClassClass(void* A, void* B);
    bool NotEqual_ByteByte(void* A, void* B);
    bool NotEqual_BoolBool(bool A, bool B);
    bool Not_PreBool(bool A);
    void* Not_Int64(void* A);
    int32_t Not_Int(int32_t A);
    _Script_CoreUObject::Vector2D NormalSafe2D(_Script_CoreUObject::Vector2D A, float Tolerance);
    float NormalizeToRange(float Value, float RangeMin, float RangeMax);
    _Script_CoreUObject::Rotator NormalizedDeltaRotator(_Script_CoreUObject::Rotator A, _Script_CoreUObject::Rotator B);
    float NormalizeAxis(float Angle);
    void Normalize2D(_Script_CoreUObject::Vector2D& A, float Tolerance);
    _Script_CoreUObject::Vector2D Normal2D(_Script_CoreUObject::Vector2D A);
    _Script_CoreUObject::Vector Normal(_Script_CoreUObject::Vector A, float Tolerance);
    _Script_CoreUObject::Vector NegateVector(_Script_CoreUObject::Vector A);
    _Script_CoreUObject::Rotator NegateRotator(_Script_CoreUObject::Rotator A);
    _Script_CoreUObject::Vector2D Negated2D(_Script_CoreUObject::Vector2D& A);
    bool NearlyEqual_TransformTransform(_Script_CoreUObject::Transform& A, _Script_CoreUObject::Transform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);
    bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);
    float MultiplyMultiply_FloatFloat(float Base, float Exp);
    float MultiplyByPi(float Value);
    _Script_CoreUObject::Vector Multiply_VectorVector(_Script_CoreUObject::Vector A, _Script_CoreUObject::Vector B);
    _Script_CoreUObject::Vector Multiply_VectorInt(_Script_CoreUObject::Vector A, int32_t B);
    _Script_CoreUObject::Vector Multiply_VectorFloat(_Script_CoreUObject::Vector A, float B);
    _Script_CoreUObject::Vector4 Multiply_Vector4Vector4(_Script_CoreUObject::Vector4& A, _Script_CoreUObject::Vector4& B);
    _Script_CoreUObject::Vector2D Multiply_Vector2DVector2D(_Script_CoreUObject::Vector2D A, _Script_CoreUObject::Vector2D B);
    _Script_CoreUObject::Vector2D Multiply_Vector2DFloat(_Script_CoreUObject::Vector2D A, float B);
    _Script_CoreUObject::Timespan Multiply_TimespanFloat(_Script_CoreUObject::Timespan A, float Scalar);
    _Script_CoreUObject::Rotator Multiply_RotatorInt(_Script_CoreUObject::Rotator A, int32_t B);
    _Script_CoreUObject::Rotator Multiply_RotatorFloat(_Script_CoreUObject::Rotator A, float B);
    _Script_CoreUObject::Quat Multiply_QuatQuat(_Script_CoreUObject::Quat& A, _Script_CoreUObject::Quat& B);
    _Script_CoreUObject::Matrix Multiply_MatrixMatrix(_Script_CoreUObject::Matrix& A, _Script_CoreUObject::Matrix& B);
    _Script_CoreUObject::Matrix Multiply_MatrixFloat(_Script_CoreUObject::Matrix& A, float B);
    _Script_CoreUObject::LinearColor Multiply_LinearColorLinearColor(_Script_CoreUObject::LinearColor A, _Script_CoreUObject::LinearColor B);
    _Script_CoreUObject::LinearColor Multiply_LinearColorFloat(_Script_CoreUObject::LinearColor A, float B);
    _Script_CoreUObject::IntPoint Multiply_IntPointIntPoint(_Script_CoreUObject::IntPoint A, _Script_CoreUObject::IntPoint B);
    _Script_CoreUObject::IntPoint Multiply_IntPointInt(_Script_CoreUObject::IntPoint A, int32_t B);
    int32_t Multiply_IntInt(int32_t A, int32_t B);
    float Multiply_IntFloat(int32_t A, float B);
    void* Multiply_Int64Int64(void* A, void* B);
    float Multiply_FloatFloat(float A, float B);
    void* Multiply_ByteByte(void* A, void* B);
    _Script_CoreUObject::Vector MirrorVectorByNormal(_Script_CoreUObject::Vector InVect, _Script_CoreUObject::Vector InNormal);
    void MinOfIntArray(void*& IntArray, int32_t& IndexOfMinValue, int32_t& MinValue);
    void MinOfFloatArray(void*& FloatArray, int32_t& IndexOfMinValue, float& MinValue);
    void MinOfByteArray(void*& ByteArray, int32_t& IndexOfMinValue, void*& MinValue);
    void* MinInt64(void* A, void* B);
    void MinimumAreaRectangle(_Script_CoreUObject::Object* WorldContextObject, void*& InVerts, _Script_CoreUObject::Vector& SampleSurfaceNormal, _Script_CoreUObject::Vector& OutRectCenter, _Script_CoreUObject::Rotator& OutRectRotation, float& OutSideLengthX, float& OutSideLengthY, bool bDebugDraw);
    int32_t Min(int32_t A, int32_t B);
    void MaxOfIntArray(void*& IntArray, int32_t& IndexOfMaxValue, int32_t& MaxValue);
    void MaxOfFloatArray(void*& FloatArray, int32_t& IndexOfMaxValue, float& MaxValue);
    void MaxOfByteArray(void*& ByteArray, int32_t& IndexOfMaxValue, void*& MaxValue);
    void* MaxInt64(void* A, void* B);
    int32_t Max(int32_t A, int32_t B);
    _Script_CoreUObject::Vector4 Matrix_TransformVector4(_Script_CoreUObject::Matrix& M, _Script_CoreUObject::Vector4 V);
    _Script_CoreUObject::Vector4 Matrix_TransformVector(_Script_CoreUObject::Matrix& M, _Script_CoreUObject::Vector V);
    _Script_CoreUObject::Vector4 Matrix_TransformPosition(_Script_CoreUObject::Matrix& M, _Script_CoreUObject::Vector V);
    _Script_CoreUObject::Quat Matrix_ToQuat(_Script_CoreUObject::Matrix& M);
    void Matrix_SetOrigin(_Script_CoreUObject::Matrix& M, _Script_CoreUObject::Vector NewOrigin);
    void Matrix_SetColumn(_Script_CoreUObject::Matrix& M, void* Column, _Script_CoreUObject::Vector Value);
    void Matrix_SetAxis(_Script_CoreUObject::Matrix& M, void* Axis, _Script_CoreUObject::Vector AxisVector);
    _Script_CoreUObject::Matrix Matrix_ScaleTranslation(_Script_CoreUObject::Matrix& M, _Script_CoreUObject::Vector Scale3D);
    _Script_CoreUObject::Matrix Matrix_RemoveTranslation(_Script_CoreUObject::Matrix& M);
    void Matrix_RemoveScaling(_Script_CoreUObject::Matrix& M, float Tolerance);
    _Script_CoreUObject::Matrix Matrix_Mirror(_Script_CoreUObject::Matrix& M, void* MirrorAxis, void* FlipAxis);
    _Script_CoreUObject::Vector Matrix_InverseTransformVector(_Script_CoreUObject::Matrix& M, _Script_CoreUObject::Vector V);
    _Script_CoreUObject::Vector Matrix_InverseTransformPosition(_Script_CoreUObject::Matrix& M, _Script_CoreUObject::Vector V);
    _Script_CoreUObject::Matrix Matrix_Identity();
    _Script_CoreUObject::Vector Matrix_GetUnitAxis(_Script_CoreUObject::Matrix& M, void* Axis);
    void Matrix_GetUnitAxes(_Script_CoreUObject::Matrix& M, _Script_CoreUObject::Vector& X, _Script_CoreUObject::Vector& Y, _Script_CoreUObject::Vector& Z);
    _Script_CoreUObject::Matrix Matrix_GetTransposed(_Script_CoreUObject::Matrix& M);
    _Script_CoreUObject::Matrix Matrix_GetTransposeAdjoint(_Script_CoreUObject::Matrix& M);
    _Script_CoreUObject::Vector Matrix_GetScaleVector(_Script_CoreUObject::Matrix& M, float Tolerance);
    _Script_CoreUObject::Vector Matrix_GetScaledAxis(_Script_CoreUObject::Matrix& M, void* Axis);
    void Matrix_GetScaledAxes(_Script_CoreUObject::Matrix& M, _Script_CoreUObject::Vector& X, _Script_CoreUObject::Vector& Y, _Script_CoreUObject::Vector& Z);
    float Matrix_GetRotDeterminant(_Script_CoreUObject::Matrix& M);
    _Script_CoreUObject::Rotator Matrix_GetRotator(_Script_CoreUObject::Matrix& M);
    _Script_CoreUObject::Vector Matrix_GetOrigin(_Script_CoreUObject::Matrix& InMatrix);
    float Matrix_GetMaximumAxisScale(_Script_CoreUObject::Matrix& M);
    _Script_CoreUObject::Matrix Matrix_GetMatrixWithoutScale(_Script_CoreUObject::Matrix& M, float Tolerance);
    _Script_CoreUObject::Matrix Matrix_GetInverse(_Script_CoreUObject::Matrix& M);
    bool Matrix_GetFrustumTopPlane(_Script_CoreUObject::Matrix& M, _Script_CoreUObject::Plane& OutPlane);
    bool Matrix_GetFrustumRightPlane(_Script_CoreUObject::Matrix& M, _Script_CoreUObject::Plane& OutPlane);
    bool Matrix_GetFrustumNearPlane(_Script_CoreUObject::Matrix& M, _Script_CoreUObject::Plane& OutPlane);
    bool Matrix_GetFrustumLeftPlane(_Script_CoreUObject::Matrix& M, _Script_CoreUObject::Plane& OutPlane);
    bool Matrix_GetFrustumFarPlane(_Script_CoreUObject::Matrix& M, _Script_CoreUObject::Plane& OutPlane);
    bool Matrix_GetFrustumBottomPlane(_Script_CoreUObject::Matrix& M, _Script_CoreUObject::Plane& OutPlane);
    float Matrix_GetDeterminant(_Script_CoreUObject::Matrix& M);
    _Script_CoreUObject::Vector Matrix_GetColumn(_Script_CoreUObject::Matrix& M, void* Column);
    bool Matrix_ContainsNaN(_Script_CoreUObject::Matrix& M);
    _Script_CoreUObject::Matrix Matrix_ConcatenateTranslation(_Script_CoreUObject::Matrix& M, _Script_CoreUObject::Vector Translation);
    _Script_CoreUObject::Matrix Matrix_ApplyScale(_Script_CoreUObject::Matrix& M, float Scale);
    float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
    float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
    _Script_CoreUObject::Vector4 MakeVector4(float X, float Y, float Z, float W);
    _Script_CoreUObject::Vector2D MakeVector2D(float X, float Y);
    _Script_CoreUObject::Vector MakeVector(float X, float Y, float Z);
    _Script_CoreUObject::Transform MakeTransform(_Script_CoreUObject::Vector Location, _Script_CoreUObject::Rotator Rotation, _Script_CoreUObject::Vector Scale);
    _Script_CoreUObject::Timespan MakeTimespan2(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t FractionNano);
    _Script_CoreUObject::Timespan MakeTimespan(int32_t Days, int32_t Hours, int32_t Minutes, int32_t Seconds, int32_t Milliseconds);
    _Script_CoreUObject::Rotator MakeRotFromZY(_Script_CoreUObject::Vector& Z, _Script_CoreUObject::Vector& Y);
    _Script_CoreUObject::Rotator MakeRotFromZX(_Script_CoreUObject::Vector& Z, _Script_CoreUObject::Vector& X);
    _Script_CoreUObject::Rotator MakeRotFromZ(_Script_CoreUObject::Vector& Z);
    _Script_CoreUObject::Rotator MakeRotFromYZ(_Script_CoreUObject::Vector& Y, _Script_CoreUObject::Vector& Z);
    _Script_CoreUObject::Rotator MakeRotFromYX(_Script_CoreUObject::Vector& Y, _Script_CoreUObject::Vector& X);
    _Script_CoreUObject::Rotator MakeRotFromY(_Script_CoreUObject::Vector& Y);
    _Script_CoreUObject::Rotator MakeRotFromXZ(_Script_CoreUObject::Vector& X, _Script_CoreUObject::Vector& Z);
    _Script_CoreUObject::Rotator MakeRotFromXY(_Script_CoreUObject::Vector& X, _Script_CoreUObject::Vector& Y);
    _Script_CoreUObject::Rotator MakeRotFromX(_Script_CoreUObject::Vector& X);
    _Script_CoreUObject::Rotator MakeRotator(float Roll, float Pitch, float Yaw);
    _Script_CoreUObject::Rotator MakeRotationFromAxes(_Script_CoreUObject::Vector Forward, _Script_CoreUObject::Vector Right, _Script_CoreUObject::Vector Up);
    _Script_CoreUObject::Transform MakeRelativeTransform(_Script_CoreUObject::Transform& A, _Script_CoreUObject::Transform& RelativeTo);
    _Script_CoreUObject::RandomStream MakeRandomStream(int32_t InitialSeed);
    _Script_CoreUObject::QualifiedFrameTime MakeQualifiedFrameTime(_Script_CoreUObject::FrameNumber Frame, _Script_CoreUObject::FrameRate FrameRate, float SubFrame);
    float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);
    _Script_CoreUObject::Plane MakePlaneFromPointAndNormal(_Script_CoreUObject::Vector Point, _Script_CoreUObject::Vector Normal);
    _Script_CoreUObject::FrameRate MakeFrameRate(int32_t Numerator, int32_t Denominator);
    _Script_CoreUObject::DateTime MakeDateTime(int32_t Year, int32_t Month, int32_t Day, int32_t Hour, int32_t Minute, int32_t Second, int32_t Millisecond);
    _Script_CoreUObject::LinearColor MakeColor(float R, float G, float B, float A);
    _Script_CoreUObject::Box2D MakeBox2D(_Script_CoreUObject::Vector2D Min, _Script_CoreUObject::Vector2D Max);
    _Script_CoreUObject::Box MakeBox(_Script_CoreUObject::Vector Min, _Script_CoreUObject::Vector Max);
    float Loge(float A);
    float Log(float A, float Base);
    bool LinePlaneIntersection_OriginNormal(_Script_CoreUObject::Vector& LineStart, _Script_CoreUObject::Vector& LineEnd, _Script_CoreUObject::Vector PlaneOrigin, _Script_CoreUObject::Vector PlaneNormal, float& T, _Script_CoreUObject::Vector& Intersection);
    bool LinePlaneIntersection(_Script_CoreUObject::Vector& LineStart, _Script_CoreUObject::Vector& LineEnd, _Script_CoreUObject::Plane& APlane, float& T, _Script_CoreUObject::Vector& Intersection);
    _Script_CoreUObject::LinearColor LinearColorLerpUsingHSV(_Script_CoreUObject::LinearColor A, _Script_CoreUObject::LinearColor B, float Alpha);
    _Script_CoreUObject::LinearColor LinearColorLerp(_Script_CoreUObject::LinearColor A, _Script_CoreUObject::LinearColor B, float Alpha);
    _Script_CoreUObject::LinearColor LinearColor_Yellow();
    _Script_CoreUObject::LinearColor LinearColor_White();
    _Script_CoreUObject::LinearColor LinearColor_Transparent();
    _Script_CoreUObject::Color LinearColor_ToRGBE(_Script_CoreUObject::LinearColor InLinearColor);
    _Script_CoreUObject::LinearColor LinearColor_ToNewOpacity(_Script_CoreUObject::LinearColor InColor, float InOpacity);
    void LinearColor_SetTemperature(_Script_CoreUObject::LinearColor& InOutColor, float InTemperature);
    void LinearColor_SetRGBA(_Script_CoreUObject::LinearColor& InOutColor, float R, float G, float B, float A);
    void LinearColor_SetRandomHue(_Script_CoreUObject::LinearColor& InOutColor);
    void LinearColor_SetFromSRGB(_Script_CoreUObject::LinearColor& InOutColor, _Script_CoreUObject::Color& InSRGB);
    void LinearColor_SetFromPow22(_Script_CoreUObject::LinearColor& InOutColor, _Script_CoreUObject::Color& InColor);
    void LinearColor_SetFromHSV(_Script_CoreUObject::LinearColor& InOutColor, float H, float S, float V, float A);
    void LinearColor_Set(_Script_CoreUObject::LinearColor& InOutColor, _Script_CoreUObject::LinearColor InColor);
    _Script_CoreUObject::LinearColor LinearColor_Red();
    _Script_CoreUObject::Color LinearColor_QuantizeRound(_Script_CoreUObject::LinearColor InColor);
    _Script_CoreUObject::Color LinearColor_Quantize(_Script_CoreUObject::LinearColor InColor);
    bool LinearColor_IsNearEqual(_Script_CoreUObject::LinearColor A, _Script_CoreUObject::LinearColor B, float Tolerance);
    _Script_CoreUObject::LinearColor LinearColor_Green();
    _Script_CoreUObject::LinearColor LinearColor_Gray();
    float LinearColor_GetMin(_Script_CoreUObject::LinearColor InColor);
    float LinearColor_GetMax(_Script_CoreUObject::LinearColor InColor);
    float LinearColor_GetLuminance(_Script_CoreUObject::LinearColor InColor);
    float LinearColor_Distance(_Script_CoreUObject::LinearColor C1, _Script_CoreUObject::LinearColor C2);
    _Script_CoreUObject::LinearColor LinearColor_Desaturated(_Script_CoreUObject::LinearColor InColor, float InDesaturation);
    _Script_CoreUObject::LinearColor LinearColor_Blue();
    _Script_CoreUObject::LinearColor LinearColor_Black();
    _Script_CoreUObject::Vector LessLess_VectorRotator(_Script_CoreUObject::Vector A, _Script_CoreUObject::Rotator B);
    bool LessEqual_TimespanTimespan(_Script_CoreUObject::Timespan A, _Script_CoreUObject::Timespan B);
    bool LessEqual_IntInt(int32_t A, int32_t B);
    bool LessEqual_Int64Int64(void* A, void* B);
    bool LessEqual_FloatFloat(float A, float B);
    bool LessEqual_DateTimeDateTime(_Script_CoreUObject::DateTime A, _Script_CoreUObject::DateTime B);
    bool LessEqual_ByteByte(void* A, void* B);
    bool Less_TimespanTimespan(_Script_CoreUObject::Timespan A, _Script_CoreUObject::Timespan B);
    bool Less_IntInt(int32_t A, int32_t B);
    bool Less_Int64Int64(void* A, void* B);
    bool Less_FloatFloat(float A, float B);
    bool Less_DateTimeDateTime(_Script_CoreUObject::DateTime A, _Script_CoreUObject::DateTime B);
    bool Less_ByteByte(void* A, void* B);
    float Lerp(float A, float B, float Alpha);
    bool IsZero2D(_Script_CoreUObject::Vector2D& A);
    bool IsPointInBoxWithTransform(_Script_CoreUObject::Vector Point, _Script_CoreUObject::Transform& BoxWorldTransform, _Script_CoreUObject::Vector BoxExtent);
    bool IsPointInBox(_Script_CoreUObject::Vector Point, _Script_CoreUObject::Vector BoxOrigin, _Script_CoreUObject::Vector BoxExtent);
    bool IsNearlyZero2D(_Script_CoreUObject::Vector2D& A, float Tolerance);
    bool IsMorning(_Script_CoreUObject::DateTime A);
    bool IsLeapYear(int32_t Year);
    bool IsAfternoon(_Script_CoreUObject::DateTime A);
    _Script_CoreUObject::Transform InvertTransform(_Script_CoreUObject::Transform& T);
    _Script_CoreUObject::Rotator InverseTransformRotation(_Script_CoreUObject::Transform& T, _Script_CoreUObject::Rotator Rotation);
    _Script_CoreUObject::Vector InverseTransformLocation(_Script_CoreUObject::Transform& T, _Script_CoreUObject::Vector Location);
    _Script_CoreUObject::Vector InverseTransformDirection(_Script_CoreUObject::Transform& T, _Script_CoreUObject::Vector Direction);
    _Script_CoreUObject::IntPoint IntPoint_Zero();
    _Script_CoreUObject::IntPoint IntPoint_Up();
    _Script_CoreUObject::IntPoint IntPoint_Right();
    _Script_CoreUObject::IntPoint IntPoint_One();
    _Script_CoreUObject::IntPoint IntPoint_Left();
    _Script_CoreUObject::IntPoint IntPoint_Down();
    bool InRange_IntInt(int32_t Value, int32_t Min, int32_t Max, bool InclusiveMin, bool InclusiveMax);
    bool InRange_Int64Int64(void* Value, void* Min, void* Max, bool InclusiveMin, bool InclusiveMax);
    bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);
    float Hypotenuse(float Width, float Height);
    _Script_CoreUObject::LinearColor HSVToRGBLinear(_Script_CoreUObject::LinearColor HSV);
    void HSVToRGB_Vector(_Script_CoreUObject::LinearColor HSV, _Script_CoreUObject::LinearColor& RGB);
    _Script_CoreUObject::LinearColor HSVToRGB(float H, float S, float V, float A);
    float GridSnap_Float(float Location, float GridSize);
    _Script_CoreUObject::Vector GreaterGreater_VectorRotator(_Script_CoreUObject::Vector A, _Script_CoreUObject::Rotator B);
    bool GreaterEqual_TimespanTimespan(_Script_CoreUObject::Timespan A, _Script_CoreUObject::Timespan B);
    bool GreaterEqual_IntInt(int32_t A, int32_t B);
    bool GreaterEqual_Int64Int64(void* A, void* B);
    bool GreaterEqual_FloatFloat(float A, float B);
    bool GreaterEqual_DateTimeDateTime(_Script_CoreUObject::DateTime A, _Script_CoreUObject::DateTime B);
    bool GreaterEqual_ByteByte(void* A, void* B);
    bool Greater_TimespanTimespan(_Script_CoreUObject::Timespan A, _Script_CoreUObject::Timespan B);
    bool Greater_IntInt(int32_t A, int32_t B);
    bool Greater_Int64Int64(void* A, void* B);
    bool Greater_FloatFloat(float A, float B);
    bool Greater_DateTimeDateTime(_Script_CoreUObject::DateTime A, _Script_CoreUObject::DateTime B);
    bool Greater_ByteByte(void* A, void* B);
    int32_t GetYear(_Script_CoreUObject::DateTime A);
    void GetYawPitchFromVector(_Script_CoreUObject::Vector InVec, float& Yaw, float& Pitch);
    _Script_CoreUObject::Vector GetVectorArrayAverage(void*& Vectors);
    _Script_CoreUObject::Vector GetUpVector(_Script_CoreUObject::Rotator InRot);
    float GetTotalSeconds(_Script_CoreUObject::Timespan A);
    float GetTotalMinutes(_Script_CoreUObject::Timespan A);
    float GetTotalMilliseconds(_Script_CoreUObject::Timespan A);
    float GetTotalHours(_Script_CoreUObject::Timespan A);
    float GetTotalDays(_Script_CoreUObject::Timespan A);
    _Script_CoreUObject::Timespan GetTimeOfDay(_Script_CoreUObject::DateTime A);
    float GetTAU();
    void GetSlopeDegreeAngles(_Script_CoreUObject::Vector& MyRightYAxis, _Script_CoreUObject::Vector& FloorNormal, _Script_CoreUObject::Vector& UpVector, float& OutSlopePitchDegreeAngle, float& OutSlopeRollDegreeAngle);
    int32_t GetSeconds(_Script_CoreUObject::Timespan A);
    int32_t GetSecond(_Script_CoreUObject::DateTime A);
    _Script_CoreUObject::Vector2D GetRotated2D(_Script_CoreUObject::Vector2D A, float AngleDeg);
    _Script_CoreUObject::Vector GetRightVector(_Script_CoreUObject::Rotator InRot);
    _Script_CoreUObject::Vector GetReflectionVector(_Script_CoreUObject::Vector Direction, _Script_CoreUObject::Vector SurfaceNormal);
    float GetPointDistanceToSegment(_Script_CoreUObject::Vector Point, _Script_CoreUObject::Vector SegmentStart, _Script_CoreUObject::Vector SegmentEnd);
    float GetPointDistanceToLine(_Script_CoreUObject::Vector Point, _Script_CoreUObject::Vector LineOrigin, _Script_CoreUObject::Vector LineDirection);
    float GetPI();
    int32_t GetMonth(_Script_CoreUObject::DateTime A);
    int32_t GetMinutes(_Script_CoreUObject::Timespan A);
    int32_t GetMinute(_Script_CoreUObject::DateTime A);
    float GetMinElement(_Script_CoreUObject::Vector A);
    float GetMin2D(_Script_CoreUObject::Vector2D A);
    int32_t GetMilliseconds(_Script_CoreUObject::Timespan A);
    int32_t GetMillisecond(_Script_CoreUObject::DateTime A);
    float GetMaxElement(_Script_CoreUObject::Vector A);
    float GetMax2D(_Script_CoreUObject::Vector2D A);
    int32_t GetHours(_Script_CoreUObject::Timespan A);
    int32_t GetHour12(_Script_CoreUObject::DateTime A);
    int32_t GetHour(_Script_CoreUObject::DateTime A);
    _Script_CoreUObject::Vector GetForwardVector(_Script_CoreUObject::Rotator InRot);
    _Script_CoreUObject::Timespan GetDuration(_Script_CoreUObject::Timespan A);
    _Script_CoreUObject::Vector GetDirectionUnitVector(_Script_CoreUObject::Vector From, _Script_CoreUObject::Vector To);
    int32_t GetDays(_Script_CoreUObject::Timespan A);
    int32_t GetDayOfYear(_Script_CoreUObject::DateTime A);
    int32_t GetDay(_Script_CoreUObject::DateTime A);
    _Script_CoreUObject::DateTime GetDate(_Script_CoreUObject::DateTime A);
    void GetAzimuthAndElevation(_Script_CoreUObject::Vector InDirection, _Script_CoreUObject::Transform& ReferenceFrame, float& Azimuth, float& Elevation);
    void GetAxes(_Script_CoreUObject::Rotator A, _Script_CoreUObject::Vector& X, _Script_CoreUObject::Vector& Y, _Script_CoreUObject::Vector& Z);
    float GetAbsMax2D(_Script_CoreUObject::Vector2D A);
    _Script_CoreUObject::Vector2D GetAbs2D(_Script_CoreUObject::Vector2D A);
    float FWrap(float Value, float Min, float Max);
    _Script_CoreUObject::IntVector FTruncVector(_Script_CoreUObject::Vector& InVector);
    void* FTrunc64(float A);
    int32_t FTrunc(float A);
    _Script_CoreUObject::Timespan FromSeconds(float Seconds);
    _Script_CoreUObject::Timespan FromMinutes(float Minutes);
    _Script_CoreUObject::Timespan FromMilliseconds(float Milliseconds);
    _Script_CoreUObject::Timespan FromHours(float Hours);
    _Script_CoreUObject::Timespan FromDays(float Days);
    float Fraction(float A);
    int32_t FMod(float Dividend, float Divisor, float& Remainder);
    float FMin(float A, float B);
    float FMax(float A, float B);
    float FloatSpringInterp(float Current, float Target, _Script_Engine::FloatSpringState& SpringState, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass);
    float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);
    float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);
    float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);
    float FInterpEaseInOut(float A, float B, float Alpha, float Exponent);
    void FindNearestPointsOnLineSegments(_Script_CoreUObject::Vector Segment1Start, _Script_CoreUObject::Vector Segment1End, _Script_CoreUObject::Vector Segment2Start, _Script_CoreUObject::Vector Segment2End, _Script_CoreUObject::Vector& Segment1Point, _Script_CoreUObject::Vector& Segment2Point);
    _Script_CoreUObject::Rotator FindLookAtRotation(_Script_CoreUObject::Vector& Start, _Script_CoreUObject::Vector& Target);
    _Script_CoreUObject::Vector FindClosestPointOnSegment(_Script_CoreUObject::Vector Point, _Script_CoreUObject::Vector SegmentStart, _Script_CoreUObject::Vector SegmentEnd);
    _Script_CoreUObject::Vector FindClosestPointOnLine(_Script_CoreUObject::Vector Point, _Script_CoreUObject::Vector LineOrigin, _Script_CoreUObject::Vector LineDirection);
    void* FFloor64(float A);
    int32_t FFloor(float A);
    float FClamp(float Value, float Min, float Max);
    void* FCeil64(float A);
    int32_t FCeil(float A);
    float Exp(float A);
    bool EqualExactly_VectorVector(_Script_CoreUObject::Vector A, _Script_CoreUObject::Vector B);
    bool EqualExactly_Vector4Vector4(_Script_CoreUObject::Vector4& A, _Script_CoreUObject::Vector4& B);
    bool EqualExactly_Vector2DVector2D(_Script_CoreUObject::Vector2D A, _Script_CoreUObject::Vector2D B);
    bool EqualEqual_VectorVector(_Script_CoreUObject::Vector A, _Script_CoreUObject::Vector B, float ErrorTolerance);
    bool EqualEqual_Vector4Vector4(_Script_CoreUObject::Vector4& A, _Script_CoreUObject::Vector4& B, float ErrorTolerance);
    bool EqualEqual_Vector2DVector2D(_Script_CoreUObject::Vector2D A, _Script_CoreUObject::Vector2D B, float ErrorTolerance);
    bool EqualEqual_TransformTransform(_Script_CoreUObject::Transform& A, _Script_CoreUObject::Transform& B);
    bool EqualEqual_TimespanTimespan(_Script_CoreUObject::Timespan A, _Script_CoreUObject::Timespan B);
    bool EqualEqual_RotatorRotator(_Script_CoreUObject::Rotator A, _Script_CoreUObject::Rotator B, float ErrorTolerance);
    bool EqualEqual_QuatQuat(_Script_CoreUObject::Quat& A, _Script_CoreUObject::Quat& B, float Tolerance);
    bool EqualEqual_ObjectObject(_Script_CoreUObject::Object* A, _Script_CoreUObject::Object* B);
    bool EqualEqual_NameName(void* A, void* B);
    bool EqualEqual_MatrixMatrix(_Script_CoreUObject::Matrix& A, _Script_CoreUObject::Matrix& B, float Tolerance);
    bool EqualEqual_LinearColorLinearColor(_Script_CoreUObject::LinearColor A, _Script_CoreUObject::LinearColor B);
    bool EqualEqual_IntInt(int32_t A, int32_t B);
    bool EqualEqual_Int64Int64(void* A, void* B);
    bool EqualEqual_FloatFloat(float A, float B);
    bool EqualEqual_DateTimeDateTime(_Script_CoreUObject::DateTime A, _Script_CoreUObject::DateTime B);
    bool EqualEqual_ClassClass(void* A, void* B);
    bool EqualEqual_ByteByte(void* A, void* B);
    bool EqualEqual_BoolBool(bool A, bool B);
    bool Equal_IntPointIntPoint(_Script_CoreUObject::IntPoint A, _Script_CoreUObject::IntPoint B);
    float Ease(float A, float B, float Alpha, void* EasingFunc, float BlendExp, int32_t Steps);
    _Script_CoreUObject::Vector DynamicWeightedMovingAverage_FVector(_Script_CoreUObject::Vector CurrentSample, _Script_CoreUObject::Vector PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);
    _Script_CoreUObject::Rotator DynamicWeightedMovingAverage_FRotator(_Script_CoreUObject::Rotator CurrentSample, _Script_CoreUObject::Rotator PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);
    float DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);
    float DotProduct2D(_Script_CoreUObject::Vector2D A, _Script_CoreUObject::Vector2D B);
    float Dot_VectorVector(_Script_CoreUObject::Vector A, _Script_CoreUObject::Vector B);
    _Script_CoreUObject::Vector Divide_VectorVector(_Script_CoreUObject::Vector A, _Script_CoreUObject::Vector B);
    _Script_CoreUObject::Vector Divide_VectorInt(_Script_CoreUObject::Vector A, int32_t B);
    _Script_CoreUObject::Vector Divide_VectorFloat(_Script_CoreUObject::Vector A, float B);
    _Script_CoreUObject::Vector4 Divide_Vector4Vector4(_Script_CoreUObject::Vector4& A, _Script_CoreUObject::Vector4& B);
    _Script_CoreUObject::Vector2D Divide_Vector2DVector2D(_Script_CoreUObject::Vector2D A, _Script_CoreUObject::Vector2D B);
    _Script_CoreUObject::Vector2D Divide_Vector2DFloat(_Script_CoreUObject::Vector2D A, float B);
    _Script_CoreUObject::Timespan Divide_TimespanFloat(_Script_CoreUObject::Timespan A, float Scalar);
    _Script_CoreUObject::LinearColor Divide_LinearColorLinearColor(_Script_CoreUObject::LinearColor A, _Script_CoreUObject::LinearColor B);
    _Script_CoreUObject::IntPoint Divide_IntPointIntPoint(_Script_CoreUObject::IntPoint A, _Script_CoreUObject::IntPoint B);
    _Script_CoreUObject::IntPoint Divide_IntPointInt(_Script_CoreUObject::IntPoint A, int32_t B);
    int32_t Divide_IntInt(int32_t A, int32_t B);
    void* Divide_Int64Int64(void* A, void* B);
    float Divide_FloatFloat(float A, float B);
    void* Divide_ByteByte(void* A, void* B);
    float DistanceSquared2D(_Script_CoreUObject::Vector2D v1, _Script_CoreUObject::Vector2D v2);
    float Distance2D(_Script_CoreUObject::Vector2D v1, _Script_CoreUObject::Vector2D v2);
    float DegTan(float A);
    float DegSin(float A);
    float DegreesToRadians(float A);
    float DegCos(float A);
    float DegAtan2(float Y, float X);
    float DegAtan(float A);
    float DegAsin(float A);
    float DegAcos(float A);
    int32_t DaysInYear(int32_t Year);
    int32_t DaysInMonth(int32_t Year, int32_t Month);
    _Script_CoreUObject::DateTime DateTimeMinValue();
    _Script_CoreUObject::DateTime DateTimeMaxValue();
    bool DateTimeFromString(void* DateTimeString, _Script_CoreUObject::DateTime& Result);
    bool DateTimeFromIsoString(void* IsoString, _Script_CoreUObject::DateTime& Result);
    float CrossProduct2D(_Script_CoreUObject::Vector2D A, _Script_CoreUObject::Vector2D B);
    _Script_CoreUObject::Vector Cross_VectorVector(_Script_CoreUObject::Vector A, _Script_CoreUObject::Vector B);
    _Script_CoreUObject::Vector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);
    float Cos(float A);
    _Script_CoreUObject::Transform ConvertTransformToRelative(_Script_CoreUObject::Transform& Transform, _Script_CoreUObject::Transform& ParentTransform);
    _Script_CoreUObject::Vector2D Conv_VectorToVector2D(_Script_CoreUObject::Vector InVector);
    _Script_CoreUObject::Transform Conv_VectorToTransform(_Script_CoreUObject::Vector InLocation);
    _Script_CoreUObject::Rotator Conv_VectorToRotator(_Script_CoreUObject::Vector InVec);
    _Script_CoreUObject::Quat Conv_VectorToQuaternion(_Script_CoreUObject::Vector InVec);
    _Script_CoreUObject::LinearColor Conv_VectorToLinearColor(_Script_CoreUObject::Vector InVec);
    _Script_CoreUObject::Vector Conv_Vector4ToVector(_Script_CoreUObject::Vector4& InVector4);
    _Script_CoreUObject::Rotator Conv_Vector4ToRotator(_Script_CoreUObject::Vector4& InVec);
    _Script_CoreUObject::Quat Conv_Vector4ToQuaternion(_Script_CoreUObject::Vector4& InVec);
    _Script_CoreUObject::Vector Conv_Vector2DToVector(_Script_CoreUObject::Vector2D InVector2D, float Z);
    _Script_CoreUObject::IntPoint Conv_Vector2DToIntPoint(_Script_CoreUObject::Vector2D InVector2D);
    _Script_CoreUObject::Matrix Conv_TransformToMatrix(_Script_CoreUObject::Transform& Transform);
    _Script_CoreUObject::Vector Conv_RotatorToVector(_Script_CoreUObject::Rotator InRot);
    _Script_CoreUObject::Transform Conv_RotatorToTransform(_Script_CoreUObject::Rotator& InRotator);
    _Script_CoreUObject::Transform Conv_MatrixToTransform(_Script_CoreUObject::Matrix& InMatrix);
    _Script_CoreUObject::Rotator Conv_MatrixToRotator(_Script_CoreUObject::Matrix& InMatrix);
    _Script_CoreUObject::Vector Conv_LinearColorToVector(_Script_CoreUObject::LinearColor InLinearColor);
    _Script_CoreUObject::Color Conv_LinearColorToColor(_Script_CoreUObject::LinearColor InLinearColor, bool InUseSRGB);
    _Script_CoreUObject::Vector Conv_IntVectorToVector(_Script_CoreUObject::IntVector& InIntVector);
    _Script_CoreUObject::IntVector Conv_IntToIntVector(int32_t inInt);
    void* Conv_IntToInt64(int32_t inInt);
    float Conv_IntToFloat(int32_t inInt);
    void* Conv_IntToByte(int32_t inInt);
    bool Conv_IntToBool(int32_t inInt);
    _Script_CoreUObject::Vector2D Conv_IntPointToVector2D(_Script_CoreUObject::IntPoint InIntPoint);
    int32_t Conv_Int64ToInt(void* inInt);
    void* Conv_Int64ToByte(void* inInt);
    _Script_CoreUObject::Vector Conv_FloatToVector(float InFloat);
    _Script_CoreUObject::LinearColor Conv_FloatToLinearColor(float InFloat);
    _Script_CoreUObject::LinearColor Conv_ColorToLinearColor(_Script_CoreUObject::Color InColor);
    int32_t Conv_ByteToInt(void* InByte);
    float Conv_ByteToFloat(void* InByte);
    int32_t Conv_BoolToInt(bool InBool);
    float Conv_BoolToFloat(bool InBool);
    void* Conv_BoolToByte(bool InBool);
    _Script_CoreUObject::Transform ComposeTransforms(_Script_CoreUObject::Transform& A, _Script_CoreUObject::Transform& B);
    _Script_CoreUObject::Rotator ComposeRotators(_Script_CoreUObject::Rotator A, _Script_CoreUObject::Rotator B);
    bool ClassIsChildOf(void* TestClass, void* ParentClass);
    _Script_CoreUObject::Vector ClampVectorSize(_Script_CoreUObject::Vector A, float Min, float Max);
    void* ClampInt64(void* Value, void* Min, void* Max);
    float ClampAxis(float Angle);
    _Script_CoreUObject::Vector2D ClampAxes2D(_Script_CoreUObject::Vector2D A, float MinAxisVal, float MaxAxisVal);
    float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);
    int32_t Clamp(int32_t Value, int32_t Min, int32_t Max);
    _Script_CoreUObject::LinearColor CInterpTo(_Script_CoreUObject::LinearColor Current, _Script_CoreUObject::LinearColor Target, float DeltaTime, float InterpSpeed);
    void BreakVector4(_Script_CoreUObject::Vector4& InVec, float& X, float& Y, float& Z, float& W);
    void BreakVector2D(_Script_CoreUObject::Vector2D InVec, float& X, float& Y);
    void BreakVector(_Script_CoreUObject::Vector InVec, float& X, float& Y, float& Z);
    void BreakTransform(_Script_CoreUObject::Transform& InTransform, _Script_CoreUObject::Vector& Location, _Script_CoreUObject::Rotator& Rotation, _Script_CoreUObject::Vector& Scale);
    void BreakTimespan2(_Script_CoreUObject::Timespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& FractionNano);
    void BreakTimespan(_Script_CoreUObject::Timespan InTimespan, int32_t& Days, int32_t& Hours, int32_t& Minutes, int32_t& Seconds, int32_t& Milliseconds);
    void BreakRotIntoAxes(_Script_CoreUObject::Rotator& InRot, _Script_CoreUObject::Vector& X, _Script_CoreUObject::Vector& Y, _Script_CoreUObject::Vector& Z);
    void BreakRotator(_Script_CoreUObject::Rotator InRot, float& Roll, float& Pitch, float& Yaw);
    void BreakRandomStream(_Script_CoreUObject::RandomStream& InRandomStream, int32_t& InitialSeed);
    void BreakQualifiedFrameTime(_Script_CoreUObject::QualifiedFrameTime& InFrameTime, _Script_CoreUObject::FrameNumber& Frame, _Script_CoreUObject::FrameRate& FrameRate, float& SubFrame);
    void BreakFrameRate(_Script_CoreUObject::FrameRate& InFrameRate, int32_t& Numerator, int32_t& Denominator);
    void BreakDateTime(_Script_CoreUObject::DateTime InDateTime, int32_t& Year, int32_t& Month, int32_t& Day, int32_t& Hour, int32_t& Minute, int32_t& Second, int32_t& Millisecond);
    void BreakColor(_Script_CoreUObject::LinearColor InColor, float& R, float& G, float& B, float& A);
    bool BooleanXOR(bool A, bool B);
    bool BooleanOR(bool A, bool B);
    bool BooleanNOR(bool A, bool B);
    bool BooleanNAND(bool A, bool B);
    bool BooleanAND(bool A, bool B);
    void* BMin(void* A, void* B);
    void* BMax(void* A, void* B);
    float Atan2(float Y, float X);
    float Atan(float A);
    float Asin(float A);
    int32_t And_IntInt(int32_t A, int32_t B);
    void* And_Int64Int64(void* A, void* B);
    _Script_CoreUObject::Vector Add_VectorVector(_Script_CoreUObject::Vector A, _Script_CoreUObject::Vector B);
    _Script_CoreUObject::Vector Add_VectorInt(_Script_CoreUObject::Vector A, int32_t B);
    _Script_CoreUObject::Vector Add_VectorFloat(_Script_CoreUObject::Vector A, float B);
    _Script_CoreUObject::Vector4 Add_Vector4Vector4(_Script_CoreUObject::Vector4& A, _Script_CoreUObject::Vector4& B);
    _Script_CoreUObject::Vector2D Add_Vector2DVector2D(_Script_CoreUObject::Vector2D A, _Script_CoreUObject::Vector2D B);
    _Script_CoreUObject::Vector2D Add_Vector2DFloat(_Script_CoreUObject::Vector2D A, float B);
    _Script_CoreUObject::Timespan Add_TimespanTimespan(_Script_CoreUObject::Timespan A, _Script_CoreUObject::Timespan B);
    _Script_CoreUObject::Quat Add_QuatQuat(_Script_CoreUObject::Quat& A, _Script_CoreUObject::Quat& B);
    _Script_CoreUObject::Matrix Add_MatrixMatrix(_Script_CoreUObject::Matrix& A, _Script_CoreUObject::Matrix& B);
    _Script_CoreUObject::LinearColor Add_LinearColorLinearColor(_Script_CoreUObject::LinearColor A, _Script_CoreUObject::LinearColor B);
    _Script_CoreUObject::IntPoint Add_IntPointIntPoint(_Script_CoreUObject::IntPoint A, _Script_CoreUObject::IntPoint B);
    _Script_CoreUObject::IntPoint Add_IntPointInt(_Script_CoreUObject::IntPoint A, int32_t B);
    int32_t Add_IntInt(int32_t A, int32_t B);
    void* Add_Int64Int64(void* A, void* B);
    float Add_FloatFloat(float A, float B);
    _Script_CoreUObject::DateTime Add_DateTimeTimespan(_Script_CoreUObject::DateTime A, _Script_CoreUObject::Timespan B);
    _Script_CoreUObject::DateTime Add_DateTimeDateTime(_Script_CoreUObject::DateTime A, _Script_CoreUObject::DateTime B);
    void* Add_ByteByte(void* A, void* B);
    float Acos(float A);
    void* Abs_Int64(void* A);
    int32_t Abs_Int(int32_t A);
    float Abs(float A);
}; // Size: 0x28
#pragma pack(pop)
}
